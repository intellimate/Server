<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<configuration>
    <!-- Configure the database connection here -->
    <jdbc>
        <driver>com.mysql.jdbc.Driver</driver>
        <url>jdbc:mysql://localhost:8888</url>
        <user>LeanderK</user>
        <password></password>
    </jdbc>

    <generator>
        <database>
            <!-- First, register your custom types here -->
            <customTypes>
                <customType>
                    <!-- Specify the name of your custom type. Avoid using names from org.jooq.impl.SQLDataType -->
                    <name>JsonElement</name>

                    <!-- Specify the Java type of your custom type. This corresponds to the Binding's <U> type. -->
                    <type>com.google.gson.JsonElement</type>

                    <!-- Associate that custom type with your binding. -->
                    <binding>org.intellimate.bindings.JSONGsonBinding</binding>
                </customType>
            </customTypes>

            <!-- Then, associate custom types with database columns -->
            <forcedTypes>
                <forcedType>
                    <!-- Specify the name of your custom type -->
                    <name>JsonElement</name>

                    <!-- Add a Java regular expression matching fully-qualified columns. Use the pipe to separate several expressions.

                         If provided, both "expressions" and "types" must match. -->
                    <expression>.*PLATFORM_DATA.*</expression>

                    <!-- Add a Java regular expression matching data types to be forced to
                         have this type.

                         Data types may be reported by your database as:
                         - NUMBER              regexp suggestion: NUMBER
                         - NUMBER(5)           regexp suggestion: NUMBER\(5\)
                         - NUMBER(5, 2)        regexp suggestion: NUMBER\(5,\s*2\)
                         - any other form

                         It is thus recommended to use defensive regexes for types.

                         If provided, both "expressions" and "types" must match. -->
                    <types>.*</types>
                </forcedType>
            </forcedTypes>
            <!-- The database dialect from jooq-meta. Available dialects are
                 named org.util.[database].[database]Database.

                 Natively supported values are:

                     org.jooq.util.ase.ASEDatabase
                     org.jooq.util.cubrid.CUBRIDDatabase
                     org.jooq.util.db2.DB2Database
                     org.jooq.util.derby.DerbyDatabase
                     org.jooq.util.firebird.FirebirdDatabase
                     org.jooq.util.h2.H2Database
                     org.jooq.util.hsqldb.HSQLDBDatabase
                     org.jooq.util.informix.InformixDatabase
                     org.jooq.util.ingres.IngresDatabase
                     org.jooq.util.mariadb.MariaDBDatabase
                     org.jooq.util.mysql.MySQLDatabase
                     org.jooq.util.oracle.OracleDatabase
                     org.jooq.util.postgres.PostgresDatabase
                     org.jooq.util.sqlite.SQLiteDatabase
                     org.jooq.util.sqlserver.SQLServerDatabase
                     org.jooq.util.sybase.SybaseDatabase

                 This value can be used to reverse-engineer generic JDBC DatabaseMetaData (e.g. for MS Access)

                     org.jooq.util.jdbc.JDBCDatabase

                 This value can be used to reverse-engineer standard jOOQ-meta XML formats

                     org.jooq.util.xml.XMLDatabase

                 You can also provide your own org.jooq.util.Database implementation
                 here, if your database is currently not supported -->
            <name>org.jooq.util.mysql.MySQLDatabase</name>

            <!-- The schema that is used locally as a source for meta information.
                 This could be your development schema or the production schema, etc
                 This cannot be combined with the schemata element.

                 If left empty, jOOQ will generate all available schemata. See the
                 manual's next section to learn how to generate several schemata -->
            <inputSchema>izou_server</inputSchema>
        </database>

        <generate>
            <!-- Generation flags: See advanced configuration properties -->
        </generate>

        <target>
            <!-- The destination package of your generated classes (within the
                 destination directory)

                 jOOQ may append the schema name to this package if generating multiple schemas,
                 e.g. org.jooq.your.packagename.schema1
                      org.jooq.your.packagename.schema2 -->
            <packageName>org.intellimate.server.database.model</packageName>

            <!-- The destination directory of your generated classes -->
            <directory>src/main/java</directory>
        </target>
    </generator>
</configuration>